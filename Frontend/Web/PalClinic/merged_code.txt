
--- FILE: eslint.config.js ---

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]



--- FILE: index.css ---

body{
    background-color: #FFFFFF;
}


--- FILE: index.html ---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/png" href="/logo.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PalClinic</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  
  </body>
</html>



--- FILE: vite.config.js ---

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})



--- FILE: src\App.jsx ---

import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import ProtectedRoute from "./Components/ProtectedRoute";
import UnderDevelopment from "./Components/UnderDevelopment";
import LoginPage from "./Pages/Auth/LogIn";
import Unauthorized from "./Components/Unauthorized";
import { AdminDashboard } from "./Pages/admin/dashboard";
import HealthCenterAdminPage from "./Pages/admin/HealthCenter";

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/login" element={<LoginPage />} />
        <Route path="/unauthorized" element={<Unauthorized />} />
        <Route
          path="/admin"
          element={
            <ProtectedRoute allowedRoles={["admin"]}>
              <AdminDashboard />
            </ProtectedRoute>
          }
        />
        <Route
          path="/admin/healthCenters"
          element={
            <ProtectedRoute allowedRoles={["admin"]}>
              <AdminDashboard />
            </ProtectedRoute>
          }
        />

        <Route
          path="/clinicModerator"
          element={
            <ProtectedRoute allowedRoles={["clinic_moderator"]}>
              <UnderDevelopment />
            </ProtectedRoute>
          }
        />
        <Route
          path="/healthModerator"
          element={
            <ProtectedRoute allowedRoles={["healthcarecenter_moderator"]}>
              <UnderDevelopment />
            </ProtectedRoute>
          }
        />
        {/* Optionally add default or fallback routes */}
      </Routes>
    </Router>
  );
}

export default App;



--- FILE: src\main.jsx ---

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'

import App from './App.jsx'
import '../index.css';
createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)



--- FILE: src\API\Auth\LogIn.js ---

import { BASE_URL } from "../../Config/Urls";
import { getAccessToken } from "../../Config/TokenManager";

const login = async (email, password) => {
  const response = await fetch(`${BASE_URL}/Users/signIn/`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ email, password }),
  });
  console.log(response.ok)
  return response;
};

const getUserApi = async () => {
  const response = await fetch(`${BASE_URL}/Users/me`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${ getAccessToken()}`,
    },
  });
  return response;
};

export default login;
export { getUserApi };



--- FILE: src\API\Auth\LogOut.js ---




--- FILE: src\assets\Theme\Theme1.js ---

// theme.ts

export const Theme = {
  // üé® Color Palette

  // Primary branding color (used for buttons, headers, icons)
  primary: '#007BFF', // Medical blue

  // Lighter variant for backgrounds and cards
  primaryLight: '#E6F0FA', // Light blue for cards, hover states

  // Accent color for actions (e.g. floating button, highlights)
  accent: '#00C9A7', // Calming mint green

  // Backgrounds
  background: '#FFFFFF', // Main app background
  cardBackground: '#F0F8FF', // For appointment cards and surfaces
  navBarBackground: '#F9F9F9', // For bottom navigation/tab bar

  // Text colors
  textPrimary: '#1C1C1C', // Titles, main labels
  textSecondary: '#666666', // Subtext, captions, less important text
  textInverse: '#FFFFFF', // On colored buttons or dark areas

  // Status colors
  success: '#5CB85C', // Success messages, confirmed appointments
  warning: '#FFC107', // For things like pending status
  danger: '#D9534F', // Errors, cancellations

  // Borders and shadows
  border: '#E0E0E0', // Input borders, dividers
  shadow: 'rgba(0, 0, 0, 0.1)', // Card and modal shadow

  // Disabled state
  disabled: '#CCCCCC', // For disabled buttons or inputs

  // Optional highlights
  highlight: '#D0F0E9', // Background for selected or hovered items

  // üî§ Font Sizes
  fontSize: {
    title: 20,       // Page titles
    heading: 18,     // Section headers
    normal: 16,      // Regular text
    small: 14,       // Captions, helper text
    tiny: 12,        // Very small notes
  },

  // üìê Spacing (used for margin/padding)
  spacing: {
    tiny: 4,
    small: 8,
    medium: 16,
    large: 24,
    xLarge: 32,
  },

  // üî≤ Border radius for consistent rounded corners
  borderRadius: {
    small: 6,
    medium: 12,
    large: 20,
  },

  // üÜé Font weights
  fontWeight: {
    light: '300',
    normal: '400',
    medium: '500',
    bold: '700',
  }
};



--- FILE: src\Components\ProtectedRoute.jsx ---


import { Navigate } from "react-router-dom";
import { getUser } from "../Config/UserManager";

export default function ProtectedRoute({ allowedRoles, children }) {
  const user = getUser();

  if (!user) return <Navigate to="/login" replace />;

  if (!allowedRoles.includes(user.role)) {
    return <Navigate to="/unauthorized" replace />;
  }

  return children;
}


--- FILE: src\Components\Unauthorized.css ---

/* src/components/Unauthorized.css */

.unauthorized-container {
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(to right, #ff4b2b, #ff416c);
  height: 100vh;
  color: #fff;
  font-family: 'Segoe UI', sans-serif;
  padding: 20px;
}

.unauthorized-box {
  text-align: center;
  background-color: rgba(255, 255, 255, 0.1);
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 16px;
  padding: 40px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  backdrop-filter: blur(10px);
}

.unauthorized-box h1 {
  font-size: 6rem;
  margin: 0;
}

.unauthorized-box h2 {
  font-size: 2rem;
  margin: 10px 0;
}

.unauthorized-box p {
  font-size: 1.1rem;
  margin-bottom: 30px;
}

.unauthorized-box a {
  display: inline-block;
  text-decoration: none;
  background: #fff;
  color: #ff416c;
  padding: 12px 24px;
  border-radius: 30px;
  font-weight: bold;
  transition: background 0.3s;
}

.unauthorized-box a:hover {
  background: #ffe4ec;
}



--- FILE: src\Components\Unauthorized.jsx ---

import React from 'react';
import './Unauthorized.css';

function Unauthorized() {
  return (
    <div className="unauthorized-container">
      <div className="unauthorized-box">
        <h1>403</h1>
        <h2>Unauthorized Access</h2>
        <p>You don‚Äôt have permission to view this page.</p>
        <a href="/">Go Back Home</a>
      </div>
    </div>
  );
}

export default Unauthorized;


--- FILE: src\Components\UnderDevelopment.css ---

/* src/components/UnderDevelopment.css */

.under-construction {
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background: linear-gradient(to right, #4facfe, #00f2fe);
  color: #fff;
  text-align: center;
  font-family: 'Segoe UI', sans-serif;
  padding: 20px;
}

.under-construction img {
  max-width: 300px;
  margin-bottom: 20px;
}

.under-construction h1 {
  font-size: 3rem;
  margin: 0;
}

.under-construction p {
  font-size: 1.2rem;
  margin: 10px 0 30px;
}

.spinner {
  border: 6px solid rgba(255, 255, 255, 0.3);
  border-top: 6px solid white;
  border-radius: 50%;
  width: 50px;
  height: 50px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}



--- FILE: src\Components\UnderDevelopment.jsx ---

// src/components/UnderDevelopment.js
import React from 'react';
import './UnderDevelopment.css';
import constructionImage from '../assets/under_construction.svg';

function UnderDevelopment() {
  return (
    <div className="under-construction">
      <img src={constructionImage} alt="Under Construction" />
      <h1>Coming Soon</h1>
      <p>We‚Äôre working hard to launch this page. Stay tuned!</p>
      <div className="spinner"></div>
    </div>
  );
}

export default UnderDevelopment;



--- FILE: src\Components\admin\dummy.jsx ---

export function CreateHealthCenter() { return <h2>ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ±ŸÉÿ≤ ÿµÿ≠Ÿä (Dummy)</h2>; }
export function CreateModerator()   { return <h2>ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ¥ÿ±ŸÅ (Dummy)</h2>; }
export function AssignModerator()   { return <h2>ÿ™ÿπŸäŸäŸÜ ŸÖÿ¥ÿ±ŸÅ (Dummy)</h2>; }
export function HealthCentersList() { return <h2>ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖÿ±ÿßŸÉÿ≤ ÿßŸÑÿµÿ≠Ÿäÿ© (Dummy)</h2>; }
 


--- FILE: src\Components\admin\TabNav.jsx ---

/* -------------------------------------------------
 *  TabNav.jsx  ‚Äì  Five-item bottom tab bar
 *  -------------------------------------------------
 *  ‚Ä¢ React-Router-DOM v6
 *  ‚Ä¢ react-icons/mdi (Material Design glyphs)
 *  ‚Ä¢ RTL-friendly, uses your Theme
 * -------------------------------------------------*/

import React from "react";
import { NavLink } from "react-router-dom";
import {
  MdHomeFilled,
  MdFavorite,          // medical file (heartbeat)
  MdMedicalServices,   // health centres
  MdNotificationsNone, // notifications
  MdPersonOutline,     // doctors
} from "react-icons/md";

import { Theme } from "../../assets/Theme/Theme1";      

export default function TabNav() {
  const tabs = [
    { to: "/admin/healthCenters",            Icon: MdHomeFilled,         label: "ÿßŸÑŸÖÿ±ÿßŸÉÿ≤ ÿßŸÑÿµÿ≠Ÿäÿ©" },
    { to: "/admin/clinics",     Icon: MdFavorite,           label: "ÿßŸÑÿπŸäÿßÿØÿßÿ™" },
    { to: "/admin/statistics", Icon: MdNotificationsNone, label: "ÿßŸÑÿßÿ≠ÿµÿßÿ°ÿßÿ™" },
  ];

  return (
    <nav style={S.wrapper}>
      {tabs.map(({ to, Icon, label }) => (
        <NavLink
          key={to}
          to={to}
          end
          style={({ isActive }) => ({
            ...S.tab,
            color: isActive ? Theme.accent : Theme.textSecondary,
            borderBottomColor: isActive ? Theme.accent : "transparent",
          })}
        >
          <Icon size={26} style={S.icon} />
          <span style={S.label}>{label}</span>
        </NavLink>
      ))}
    </nav>
  );
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Styles ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const S = {
  wrapper: {
    height: 64,
    width: "100%",
    display: "flex",
    justifyContent: "space-around",
    alignItems: "center",
    backgroundColor: Theme.navBarBackground,
    borderBottom: `1px solid ${Theme.border}`,
    direction: "rtl", 
    boxShadow: "0 2px 6px rgba(0, 0, 0, 0.1)",
  },
  tab: {
    flexGrow: 1,
    textAlign: "center",
    paddingTop: 6,
    paddingBottom: 8,
    textDecoration: "none",
    fontSize: Theme.fontSize.small,
    borderBottom: "2px solid transparent",
    transition: "color 150ms ease, border-color 150ms ease",
  },
  icon: { marginBottom: 4 },
  label: { display: "block" },
};



--- FILE: src\Components\admin\TopNav.jsx ---

/* -------------------------------------------------
 *  TopNav.jsx  ‚Äì  PalClinic minimalist top bar
 * ------------------------------------------------ */

import React from "react";
import { useNavigate } from "react-router-dom";
import { MdLogout, MdOutlineChatBubbleOutline } from "react-icons/md";
import { Theme } from "../../assets/Theme/Theme1";

/* Optional props:
   ‚Äì title     : string  (defaults to "PalClinic")
   ‚Äì onChat    : () => void      (fallback = navigate("/chat"))
   ‚Äì onBack    : () => void      (fallback = navigate(-1))
----------------------------------------------------------------*/
export default function TopNav({ title = "PalClinic", onChat, onBack }) {
  const navigate = useNavigate();

  /* fallback handlers */
  const handleBack = onBack || (() => navigate(-1));
  const handleChat = onChat || (() => navigate("/chat"));

  /* basic inline styles */
  const S = {
    wrapper: {
      height: 56,
      paddingInline: Theme.spacing.medium,
      backgroundColor: Theme.navBarBackground,
      borderBottom: `1px solid ${Theme.border}`,
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between",
      zIndex: 10,
    },
    side: {
      width: 40,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      fontSize: 24,
      color: Theme.accent,
      cursor: "pointer",
    },
    center: {
      display: "flex",
      alignItems: "center",
      gap: Theme.spacing.small,
      fontWeight: Theme.fontWeight.bold,
      fontSize: Theme.fontSize.heading,
      color: Theme.textPrimary,
      userSelect: "none",
    },
    logoBox: {
      width: 34,
      height: 34,
      borderRadius: 8,
      padding: 3,
      backgroundImage:
        "repeating-linear-gradient(45deg,#707070 0 4px,transparent 4px 8px)",
    },
    logo: {
      width: "100%",
      height: "100%",
      objectFit: "contain",
      borderRadius: 4,
      backgroundColor: "#fff",
    },
  };

  return (
    <header style={S.wrapper}>
      {/* ‚Üê Left icon */}
      <div style={S.side} onClick={handleBack} title="ÿ±ÿ¨Ÿàÿπ">
        <MdLogout style={{ transform: "scaleX(-1)" }} />
      </div>

      {/* ‚îÄ‚îÄ Brand (center) */}
      <div style={S.center}>
        <div style={S.logoBox}>
          <img src="/assets/logo.png" alt="PalClinic" style={S.logo} />
        </div>
        {title}
      </div>

      {/* ‚Üí Right icon */}
      <div style={S.side} onClick={handleChat} title="ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿßÿ™">
        <MdOutlineChatBubbleOutline />
      </div>
    </header>
  );
}



--- FILE: src\Components\general\sideBar.jsx ---

export default function SideBar({ active, onChange }) {
  const items = [
    { id: "createCenter",  label: "ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ±ŸÉÿ≤ ÿµÿ≠Ÿä" },
    { id: "createMod",     label: "ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ¥ÿ±ŸÅ" },
    { id: "assignMod",     label: "ÿ™ÿπŸäŸäŸÜ ŸÖÿ¥ÿ±ŸÅ" },
    { id: "listCenters",   label: "ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖÿ±ÿßŸÉÿ≤ ÿßŸÑÿµÿ≠Ÿäÿ©" },
  ];

  return (
    <aside style={S.side}>
      {items.map(({ id, label }) => (
        <button
          key={id}
          onClick={() => onChange(id)}
          style={{
            ...S.item,
            backgroundColor:
              active === id ? Theme.accent : "transparent",
            color:
              active === id ? Theme.textInverse : Theme.textPrimary,
          }}
        >
          {label}
        </button>
      ))}
    </aside>
  );
}



--- FILE: src\Config\TokenManager.js ---

import { BASE_URL } from "../Config/Urls";

export const getAccessToken =  () =>
  localStorage.getItem("accessToken");

export const getRefreshToken =  () =>
  localStorage.getItem("refreshToken");

export const setTokens =  (access, refresh) => {
   localStorage.setItem("accessToken", access);
   localStorage.setItem("refreshToken", refresh);
};

export const clearTokens =  () => {
   localStorage.removeItem("accessToken");
   localStorage.removeItem("refreshToken");
};

export const refreshAccessToken = async () => {
  const refresh = getRefreshToken();
  if (!refresh) return null;

  const response = await fetch(`${BASE_URL}/Users/token/refresh/`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ refresh }),
  });

  const data = await response.json();

  if (data?.access) {
     localStorage.setItem("accessToken", data.access);
    return data.access;
  } else {
    await clearTokens();
    return null;
  }
};



--- FILE: src\Config\Urls.js ---

export const BASE_URL = "http://192.168.1.101:8000";
export const BASE_WS  = "ws://192.168.1.101:8000";


--- FILE: src\Config\UserManager.js ---


const setUser =  (user) => {
  if (user) {
     localStorage.setItem("user", JSON.stringify(user));
  }
}

const getUser =  () => {
  const user =  localStorage.getItem("user");
  return user ? JSON.parse(user) : null;
};

const clearUser =  () => {
   localStorage.removeItem("user");
};


export { setUser, getUser, clearUser };


--- FILE: src\Config\ValidAccessToken.js ---

// tokenUtils.ts / .js (ESM)
import { jwtDecode } from "jwt-decode";
import {
  getAccessToken,
  refreshAccessToken,
  clearTokens,
} from "./TokenManager";

export async function getValidAccessToken() {
  let token =  getAccessToken();
  if (!token) return refreshAccessToken(); 
  try {
    const { exp } = jwtDecode(token); 
    const now = (Date.now() / 1000) | 0; 

    if (exp < now + 60) token = await refreshAccessToken();
    return token;
  } catch (err) {
    console.log("[JWT Decode Error]", err);
    //await clearTokens();                        // wipe corrupt tokens
    return null;
  }
}



--- FILE: src\Pages\admin\dashboard.jsx ---

import UnderDevelopment from "../../Components/UnderDevelopment";
import TopTabs from "../../Components/admin/TabNav";
import TopNav from "../../Components/admin/TopNav";

export const AdminDashboard = () => {
  return (
    <>
      <TopNav />
      <TopTabs />
    </>
  );
};



--- FILE: src\Pages\admin\HealthCenter.jsx ---

import {
  CreateHealthCenter,
  CreateModerator,
  AssignModerator,
  HealthCentersList,
} from "../../Components/admin/dummy";
import SideBar from "../../Components/general/sideBar";
import { Theme } from "../../assets/Theme/Theme1";

export default function HealthCenterAdminPage() {
  const [active, setActive] = useState("createCenter");

  const View = {
    createCenter: CreateHealthCenter,
    createMod: CreateModerator,
    assignMod: AssignModerator,
    listCenters: HealthCentersList,
  }[active];

  return (
    <div style={S.page}>
      <main style={S.content}>
        <View />
      </main>
      <SideBar active={active} onChange={setActive} />
    </div>
  );
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Styles ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const S = {
  page: {
    minHeight: "calc(100vh - 120px)" /* leave space for TopNav + TabNav */,
    display: "flex",
    flexDirection: "row-reverse" /* sidebar on the right in RTL */,
    direction: "rtl",
  },
  side: {
    width: 220,
    borderLeft: `1px solid ${Theme.border}`,
    backgroundColor: Theme.background,
    display: "flex",
    flexDirection: "column",
  },
  item: {
    padding: `${Theme.spacing.medium}px ${Theme.spacing.small}px`,
    textAlign: "right",
    border: "none",
    borderBottom: `1px solid ${Theme.border}`,
    background: "none",
    fontSize: Theme.fontSize.normal,
    cursor: "pointer",
    transition: "background-color 150ms",
  },
  content: {
    flexGrow: 1,
    padding: Theme.spacing.large,
  },
};



--- FILE: src\Pages\Auth\LogIn.jsx ---

/* -------------------------------------------------
 *  LoginPage.jsx  ‚Äì  Web login page w/ react-toastify
 *  -------------------------------------------------*/

import React, { use, useState } from "react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

import login, { getUserApi } from "../../API/Auth/LogIn";
import { clearTokens, setTokens } from "../../Config/TokenManager";
import { clearUser, getUser, setUser } from "../../Config/UserManager";
import { Theme } from "../../assets/Theme/Theme1";

export default function LoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const res = await login(email.trim(), password);
      const data = await res.json();
      if (res.ok) {
        setTokens(data.access, data.refresh);
        toast.success("ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ®ŸÜÿ¨ÿßÿ≠ ‚úî");
        const userData = await getUserApi();
        const user = await userData.json();
        console.log(user.role);
        if (userData.ok) {
          setUser(user);
          if (user.role === "admin") {
            console.log("done");
            setTimeout(() => window.location.replace("/admin"), 800);
          } else if (user.role === "clinic_moderator") {
            setTimeout(() => window.location.replace("/clinicModerator"), 800);
          }
          if (user.role === "healthcarecenter_moderator") {
            setTimeout(() => window.location.replace("/healthModerator"), 800);
          } else if (user.role === "patient") {
            toast.info(
              "ÿßŸÑŸÖŸàŸÇÿπ ŸÑÿß ŸäÿØÿπŸÖ ÿ≠ÿ≥ÿßÿ®ÿßŸÑÿ™ ÿßŸÑŸÖÿ±ÿ∂Ÿâ Ÿäÿ±ÿ¨Ÿâ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ŸÖŸÜ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ"
            );
            clearTokens();
            clearUser();
          }
        }
      } else {
        toast.error(data?.detail || "ÿÆÿ∑ÿ£ ŸÅŸä ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ‚úñ");
      }
    } catch (error) {
      toast.error(error);
    } finally {
      setLoading(false);
    }
  };

  const S = {
    page: {
      minHeight: "100vh",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      background:
        "linear-gradient(135deg, #f5fafe 0%, #ffffff 50%, #f5fafe 100%)",
    },
    card: {
      width: 380,
      padding: Theme.spacing.large,
      borderRadius: Theme.borderRadius.large,
      backgroundColor: Theme.background,
      boxShadow: `0 12px 24px ${Theme.shadow}`,
      textAlign: "center",
    },
    logoWrapper: {
      width: 120,
      height: 120,
      margin: "0 auto",
      marginBottom: Theme.spacing.large,
      borderRadius: 24,
      padding: 8,
      backgroundImage:
        "repeating-linear-gradient(45deg, #707070 0 4px, transparent 4px 8px)",
    },
    logoImg: {
      width: "100%",
      height: "100%",
      objectFit: "cover",
      borderRadius: 16,
      backgroundColor: "#fff",
    },
    input: {
      width: "100%",
      padding: Theme.spacing.small,
      marginBottom: Theme.spacing.medium,
      fontSize: Theme.fontSize.normal,
      borderRadius: Theme.borderRadius.medium,
      border: `1px solid ${Theme.border}`,
      outline: "none",
      transition: "border-color 150ms",
    },
    button: {
      width: "100%",
      padding: Theme.spacing.small,
      fontSize: Theme.fontSize.normal,
      fontWeight: Theme.fontWeight.bold,
      color: Theme.textInverse,
      backgroundColor: Theme.primary,
      border: "none",
      borderRadius: Theme.borderRadius.medium,
      cursor: "pointer",
      transition: "opacity 150ms",
      opacity: loading ? 0.6 : 1,
    },
    link: {
      marginTop: Theme.spacing.small,
      display: "inline-block",
      fontSize: Theme.fontSize.small,
      color: Theme.primary,
      textDecoration: "none",
    },
  };
  /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  UI  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  return (
    <div style={S.page}>
      {/* Toasts */}
      <ToastContainer
        position="top-center"
        autoClose={2500}
        hideProgressBar
        newestOnTop
        rtl
      />

      {/* Login card */}
      <form style={S.card} onSubmit={handleSubmit}>
        {/* Logo */}
        <div style={S.logoWrapper}>
          <img src="/assets/logo.png" alt="PalClinic Logo" style={S.logoImg} />
        </div>

        {/* Email */}
        <input
          style={S.input}
          type="email"
          placeholder="ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä"
          dir="rtl"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />

        {/* Password */}
        <input
          style={S.input}
          type="password"
          placeholder="ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±"
          dir="rtl"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />

        {/* Login */}
        <button style={S.button} disabled={loading}>
          {loading ? "ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿ≠ŸÇŸÇ..." : "ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ"}
        </button>

        {/* Register link */}
        <a href="/register" style={S.link}>
          ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ®
        </a>
      </form>
    </div>
  );
}



--- FILE: src\Pages\ClinicModerator\dashboard.jsx ---

import UnderDevelopment from "../../Components/UnderDevelopment";

export const ClinicMDashboard = () => {
    return(
        <UnderDevelopment/>
    );
}


--- FILE: src\Pages\HealthCenterModerator\dashboard.jsx ---

import UnderDevelopment from "../../Components/UnderDevelopment";

export const HealthMDashboard = () => {
    return(
        <UnderDevelopment/>
    );
}

