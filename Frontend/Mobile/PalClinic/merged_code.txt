
--- FILE: App.js ---

import * as React from "react";
import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import FlashMessage from "react-native-flash-message";
import Login from "./screens/login";
import Signup from "./screens/signup";
import Home from "./screens/main";
import { getAccessToken, getRefreshToken } from "./config/tokenManager";
const Stack = createNativeStackNavigator();

export default function App() {
  return (
    <>
      <NavigationContainer>

        <Stack.Navigator initialRouteName="Login">
          <Stack.Screen name="Login" component={Login} options={{ headerShown: false }} />
          <Stack.Screen name="Signup" component={Signup} options={{ headerShown: false }} />
          <Stack.Screen name="Main" component={Home} options={{ headerShown: false }} />
        </Stack.Navigator>
      </NavigationContainer>
      <FlashMessage position="bottom" />
    </>
  );
}



--- FILE: index.js ---

import { registerRootComponent } from 'expo';

import App from './App';

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);



--- FILE: api\appointmnets.js ---

import { BASE_URL } from "../config/config"; 
import { getValidAccessToken } from "../config/ValidAccessToken";

const getAppointments = async () => {
  const token = await getValidAccessToken();

  console.log(token)
  if (!token) throw new Error("Unauthorized");

  const response = await fetch(`${BASE_URL}/appointment/list`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`
    },
  });

  

  return response;
};

export default getAppointments;



--- FILE: api\login.js ---

import { BASE_URL } from "../config/config"; // Adjust path as needed

const login = async (email, password) => {
  const response = await fetch(`${BASE_URL}/Users/signIn/`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ email, password }),
  });
  return response;
};

export default login;



--- FILE: api\signup.js ---

import { BASE_URL } from "../config/config";

const signin = async (email, password, name, phoneNumber, confirm_password) => {
    const response = await fetch(`${BASE_URL}/Users/signUp/`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            email,
            password,
            name,
            phoneNumber,
            confirm_password,
            role: "patient",    
        }),
    });
   
    return response;
}

export default signin;

  



--- FILE: assets\Theme\Theme1.js ---

// theme.ts

export const Theme = {
  // üé® Color Palette

  // Primary branding color (used for buttons, headers, icons)
  primary: '#007BFF', // Medical blue

  // Lighter variant for backgrounds and cards
  primaryLight: '#E6F0FA', // Light blue for cards, hover states

  // Accent color for actions (e.g. floating button, highlights)
  accent: '#00C9A7', // Calming mint green

  // Backgrounds
  background: '#FFFFFF', // Main app background
  cardBackground: '#F0F8FF', // For appointment cards and surfaces
  navBarBackground: '#F9F9F9', // For bottom navigation/tab bar

  // Text colors
  textPrimary: '#1C1C1C', // Titles, main labels
  textSecondary: '#666666', // Subtext, captions, less important text
  textInverse: '#FFFFFF', // On colored buttons or dark areas

  // Status colors
  success: '#5CB85C', // Success messages, confirmed appointments
  warning: '#FFC107', // For things like pending status
  danger: '#D9534F', // Errors, cancellations

  // Borders and shadows
  border: '#E0E0E0', // Input borders, dividers
  shadow: 'rgba(0, 0, 0, 0.1)', // Card and modal shadow

  // Disabled state
  disabled: '#CCCCCC', // For disabled buttons or inputs

  // Optional highlights
  highlight: '#D0F0E9', // Background for selected or hovered items

  // üî§ Font Sizes
  fontSize: {
    title: 20,       // Page titles
    heading: 18,     // Section headers
    normal: 16,      // Regular text
    small: 14,       // Captions, helper text
    tiny: 12,        // Very small notes
  },

  // üìê Spacing (used for margin/padding)
  spacing: {
    tiny: 4,
    small: 8,
    medium: 16,
    large: 24,
    xLarge: 32,
  },

  // üî≤ Border radius for consistent rounded corners
  borderRadius: {
    small: 6,
    medium: 12,
    large: 20,
  },

  // üÜé Font weights
  fontWeight: {
    light: '300',
    normal: '400',
    medium: '500',
    bold: '700',
  }
};



--- FILE: components\appointment.js ---

import { View, Text, StyleSheet, TouchableOpacity } from "react-native";
import { Theme } from "../assets/Theme/Theme1";

export default function Appointment({ appNum,date, time, doc, health }) {
  return (
    <TouchableOpacity style={styles.container}>
      <Text>ÿ±ŸÇŸÖ ÿßŸÑŸÖŸàÿπÿØ : {appNum}</Text>
      <Text>ÿßŸÑÿ™ÿßÿ±ŸäÿÆ : {date}</Text>
      <Text>ÿßŸÑŸàŸÇÿ™ : {time}</Text>
      <Text>ÿßŸÑÿ∑ÿ®Ÿäÿ® : {doc}</Text>
      <Text>ÿßŸÑŸÖÿ±ŸÉÿ≤ ÿßŸÑÿµÿ≠Ÿä : {health}</Text>
    </TouchableOpacity>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    color: Theme.textSecondary,
    backgroundColor: Theme.cardBackground,
    borderRadius: 10,
    alignItems: "flex-end",
    borderWidth: 1,
    padding: Theme.spacing.small,
    borderColor: Theme.border,
    margin: Theme.spacing.medium,
    maxHeight: 150,
    width: "95%",
  },
});



--- FILE: components\buttomNav.js ---

import React from "react";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import { Theme } from "../assets/Theme/Theme1";

import HomeScreen from "../screens/home";
import FontAwesome from '@expo/vector-icons/FontAwesome';
import MedicalProfileScreen from "../screens/medicalprofile";
import HealthCenter from "../screens/healthCenter";
import FontAwesome6 from '@expo/vector-icons/FontAwesome6';
import Ionicons from '@expo/vector-icons/Ionicons';
import Notifications from "../screens/notifications";
const Tab = createBottomTabNavigator();
export default function BottomTabNavigator() {
  return (
    <Tab.Navigator
      screenOptions={({ route }) => ({
        tabBarIcon: ({ focused, color, size }) => {
          let iconName;
          if (route.name === "ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©") {
            iconName = "home" ;
          } else if (route.name === "ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ∑ÿ®Ÿä") {
            iconName = "heart-pulse";
            return <FontAwesome6 name={iconName} size={size} color={color} />;
          } else if (route.name === "ÿßŸÑŸÖÿ±ÿßŸÉÿ≤ ÿßŸÑÿ∑ÿ®Ÿäÿ©") {
            iconName = "hospital-o";
          } else if (route.name === "ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™") {
            iconName = "notifications-sharp";
            return <Ionicons name={iconName} size={size} color={color} />;
          }

          return <FontAwesome name={iconName} size={size} color={color} />;
        },
        tabBarActiveTintColor: Theme.accent,
        tabBarInactiveTintColor: "gray",
        tabBarStyle: {
          backgroundColor: Theme.navBarBackground,
          borderTopWidth: 1,
          borderTopColor: Theme.border,
          boxShadow: Theme.shadow,
        },
        tabBarLabelStyle: {
          fontSize: 14,
          fontWeight: "bold",
        },
      })}
    >
      <Tab.Screen
        name="ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©"
        component={HomeScreen}
        options={{ headerShown: false }}
      />
      <Tab.Screen
        name="ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ∑ÿ®Ÿä"
        component={MedicalProfileScreen}
        options={{ headerShown: false }}
      />
      <Tab.Screen
        name="ÿßŸÑŸÖÿ±ÿßŸÉÿ≤ ÿßŸÑÿ∑ÿ®Ÿäÿ©"
        component={HealthCenter}
        options={{ headerShown: false }}
      />
      <Tab.Screen
        name="ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™"
        component={Notifications}
        options={{ headerShown: false }}
      />
    </Tab.Navigator>
  );
}



--- FILE: components\topNav.js ---

import React from "react";
import { View, Text, StyleSheet, Image, TouchableOpacity } from "react-native";
import Ionicons from "react-native-vector-icons/Ionicons"; // for chat icon
import { Theme } from "../assets/Theme/Theme1"; 

export default function TopBadge({ onChatPress }) {
  return (
    <View style={styles.headerContainer}>
      <TouchableOpacity
        style={{ position: "absolute", left: 16 }}
      >
        <Ionicons name="menu" size={26} color={Theme.accent} />
      </TouchableOpacity>
      <View style={styles.centerContent}>
        <Image
          source={require("../assets/images/logo.png")} 
          style={styles.logo}
        />
        <Text style={styles.title}>PalClinic</Text>
      </View>

      <TouchableOpacity style={styles.chatButton} onPress={onChatPress}>
        <Ionicons name="chatbubbles-outline" size={26} color={Theme.accent} />
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  headerContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    paddingVertical: Theme.spacing.medium,
    paddingHorizontal: Theme.spacing.medium,
    backgroundColor: Theme.navBarBackground,
    borderBottomWidth: 1,
    borderBottomColor: Theme.border,
    position: "relative",
    boxShadow: Theme.shadow,
  },
  centerContent: {
    flexDirection: "row",
    alignItems: "center",
  },
  logo: {
    width: 30,
    height: 30,
    resizeMode: "contain",
    marginRight: 8,
  },
  title: {
    fontSize: Theme.fontSize.title,
    fontWeight: Theme.fontWeight.bold,
    color: Theme.textPrimary,
  },
  chatButton: {
    position: "absolute",
    right: 16,
    color: Theme.primaryLight
  },
});



--- FILE: config\config.js ---

export const BASE_URL = "http://192.168.1.101:8000";



--- FILE: config\tokenManager.js ---

import * as SecureStore from "expo-secure-store";
import { BASE_URL } from "./config";

export const getAccessToken = async () =>
  await SecureStore.getItemAsync("accessToken");

export const getRefreshToken = async () =>
  await SecureStore.getItemAsync("refreshToken");

export const setTokens = async (access, refresh) => {
  await SecureStore.setItemAsync("accessToken", access);
  await SecureStore.setItemAsync("refreshToken", refresh);
};

export const clearTokens = async () => {
  await SecureStore.deleteItemAsync("accessToken");
  await SecureStore.deleteItemAsync("refreshToken");
};

export const refreshAccessToken = async () => {
  const refresh = await getRefreshToken();
  if (!refresh) return null;

  const response = await fetch(`${BASE_URL}/Users/token/refresh/`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ refresh }),
  });

  const data = await response.json();

  if (data?.access) {
    await SecureStore.setItemAsync("accessToken", data.access);
    return data.access;
  } else {
    await clearTokens();
    return null;
  }
};



--- FILE: config\ValidAccessToken.js ---

// tokenUtils.ts / .js (ESM)
import { jwtDecode } from 'jwt-decode';
import {
  getAccessToken,
  refreshAccessToken,
  clearTokens,
} from '../config/tokenManager';

export async function getValidAccessToken() {
  let token = await getAccessToken();
  if (!token) return refreshAccessToken();      // nothing yet

  try {
    const { exp } = jwtDecode(token);           // ‚Üê works
    const now = Date.now() / 1000 | 0;          // int seconds

    if (exp < now + 60) token = await refreshAccessToken();
    return token;
  } catch (err) {
    console.log('[JWT Decode Error]', err);
    //await clearTokens();                        // wipe corrupt tokens
    return null;
  }
}



--- FILE: screens\healthCenter.js ---

import { View, Text } from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";

export default function HealthCenter() {
  return (
      <View>
        <Text>Health Center</Text>
      </View>
  );
}



--- FILE: screens\home.js ---

import { View, Text, StyleSheet, FlatList, ActivityIndicator } from "react-native";
import { useEffect, useState } from "react";
import Appointment from "../components/appointment";
import getAppointments from "../api/appointmnets";

export default function Home() {
  const [appointments, setAppointments] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchAppointments = async () => {
      try {
        const response = await getAppointments();
        const data = await response.json();
        setAppointments(data); // expected format: [{ appointment: {...} }, ...]
      } catch (error) {
        console.error("Failed to fetch appointments:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchAppointments();
  }, []);

  return (
    <View style={styles.container}>
      {loading ? (
        <ActivityIndicator size="large" color="blue" />
      ) : appointments.length > 0 ? (
        <FlatList
          data={appointments}
          keyExtractor={(item, index) => index.toString()}
          renderItem={({ item }) => {
            const appointment = item.appointment;

            return (
              <Appointment
                appNum={appointment.id}
                date={appointment.date}
                time={appointment.time}
                doc={appointment.doctor_name}     
                health={appointment.clinic_name}   
              />
            );
          }}
        />
      ) : (
        <Text style={styles.noData}>ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖŸàÿßÿπŸäÿØ</Text>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    paddingTop: 20,
  },
  noData: {
    textAlign: "center",
    marginTop: 20,
    fontSize: 16,
    color: "gray",
  },
});


--- FILE: screens\login.js ---

import {
  View,
  Text,
  Image,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  Alert,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { useState } from "react";
import login from "../api/login";
import { useNavigation } from "@react-navigation/native";
import * as SecureStore from "expo-secure-store";
import FlashMessage, { showMessage } from "react-native-flash-message";
import {
  setTokens,
  getAccessToken,
  getRefreshToken,
} from "../config/tokenManager";

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const navigation = useNavigation();
  const handleLogin = async () => {
    if (email === "" || password === "") {
      showMessage({
        message: "ÿ™ŸÜÿ®ŸäŸá",
        description: "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿßÿØÿÆÿßŸÑ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ŸàŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±",
        type: "danger",
        backgroundColor: "#D64545",
        color: "white",
      });
      return;
    }
    const response = await login(email, password);
    const data = await response.json();
    if (!response.ok) {
      showMessage({
        message: "ÿÆÿ∑ÿ£",
        description: "ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿßŸà ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠",
        type: "danger",
        backgroundColor: "#D64545",
        color: "white",
      });
      return;
    }

    if (data.role !== "patient") {
      showMessage({
        message: "ÿ™ŸÜÿ®ŸäŸá",
        description: "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ŸÖŸÜ ÿßŸÑŸÖÿ™ÿµŸÅÿ≠ÿå Ÿáÿ∞ÿß ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ŸÖÿÆÿµÿµ ŸÑŸÑŸÖÿ±ÿ∂Ÿâ",
        type: "danger",
        backgroundColor: "#D64545",
        color: "white",
      });
      return;
    }

    showMessage({
      message: "ŸÜÿ¨ÿßÿ≠",
      description: "ÿ™ŸÖ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ÿ®ŸÜÿ¨ÿßÿ≠",
      type: "success",
      backgroundColor: "#45D645",
      color: "white",
    });

    await setTokens(data.access, data.refresh);
    console.log("[Login]:" + data.access)
    navigation.navigate("Main");
    setEmail("");
    setPassword("");
  };

  return (
    <SafeAreaView style={logInStyle.container}>
      <View style={logInStyle.logo}>
        <Image
          source={require("../assets/images/logo.png")}
          style={logInStyle.image}
        />
        <TextInput
          placeholder="ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä"
          value={email}
          onChangeText={setEmail}
          style={logInStyle.input}
        />
        <TextInput
          placeholder="ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±"
          value={password}
          onChangeText={setPassword}
          secureTextEntry
          style={logInStyle.input}
        />
        <TouchableOpacity onPress={handleLogin} style={logInStyle.button}>
          <Text style={logInStyle.buttonText}>ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ</Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => navigation.navigate("Signup")}
          style={logInStyle.createAccount}
        >
          <Text style={logInStyle.createAccountText}>ÿßŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ®</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
}

const logInStyle = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F9FAFB",
  },
  logo: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  input: {
    width: "80%",
    height: 40,
    borderWidth: 1,
    borderColor: "black",
    borderRadius: 10,
    margin: 10,
    padding: 10,
    backgroundColor: "white",
    textAlign: "right",
  },
  button: {
    backgroundColor: "#006C9A",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginTop: 10,
    width: "80%",
    alignItems: "center",
  },
  buttonText: {
    color: "#FFFFFF",
    fontWeight: "bold",
    fontSize: 16,
    textAlign: "center",
  },
  image: {
    width: 100,
    height: 100,
    marginBottom: 20,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: "black",
  },
  createAccount: {
    marginTop: 10,
    textAlign: "center",
    color: "white",
    fontSize: 16,
    fontWeight: "bold",
  },
  createAccountText: {
    color: "black",
    fontSize: 16,
    fontWeight: "bold",
  },
});



--- FILE: screens\main.js ---

import React from "react";
import { View, Text, StyleSheet } from "react-native";
import BottomTabNavigator from "../components/buttomNav";
import TopTabNavigator from "../components/topNav";
import { SafeAreaView } from "react-native-safe-area-context";
import { Theme } from "../assets/Theme/Theme1";
export default function Main() {
  return (
    <>
      <SafeAreaView style={styles.container}>
        <TopTabNavigator style={styles.topTabNavigator} />
      </SafeAreaView>
      <BottomTabNavigator style={styles.bottomTabNavigator} />
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: Theme.background,
  },
  topTabNavigator: {
    backgroundColor: Theme.navBarBackground,
  },
  bottomTabNavigator: {
    backgroundColor: Theme.cardBackground.navBarBackground,
  },
});



--- FILE: screens\medicalprofile.js ---

import { View, Text } from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";

export default function MedicalProfile() {
  return (

        <View>
        <Text>Medical Profile</Text>
      </View>

  );
}



--- FILE: screens\notifications.js ---

import React from 'react';
import { View, Text } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
export default function Notifications() {
    return (
            <Text>Notifications</Text>
    );
}



--- FILE: screens\signup.js ---

import { SafeAreaView } from "react-native-safe-area-context";
import {
  View,
  Text,
  StyleSheet,
  Image,
  TextInput,
  TouchableOpacity,
} from "react-native";
import { useState } from "react";
import { useNavigation } from "@react-navigation/native";
import { showMessage } from "react-native-flash-message";
import signin from "../api/signup";

const Signup = () => {
  const [email, setEmail] = useState("");
  const [name, setName] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [phoneNumber, setPhoneNumber] = useState("");
  const navigation = useNavigation();

  const handleSignup = async () => {
    if (!email || !name || !password || !confirmPassword || !phoneNumber) {
        console.log(email, name, password, confirmPassword, phoneNumber);
      showMessage({
        message: "ÿ™ŸÜÿ®ŸäŸá",
        description: "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ÿπÿ®ÿ¶ÿ© ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇŸàŸÑ",
        type: "danger",
        backgroundColor: "#D64545",
        color: "white",
      });
      return;
    }
    if (password !== confirmPassword) {
      showMessage({
        message: "ÿ™ŸÜÿ®ŸäŸá",
        description: "ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ∫Ÿäÿ± ŸÖÿ™ÿ∑ÿßÿ®ŸÇÿ©",
        type: "danger",
        backgroundColor: "#D64545",
        color: "white",
      });
      return;
    }

    const response = await signin(
      email,
      password,
      name,
      phoneNumber,
      confirmPassword
    );

    if (response.ok) {
      navigation.navigate("Login");
      showMessage({
        message: "ÿ™ŸÜÿ®ŸäŸá",
        description: "ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿ®ŸÜÿ¨ÿßÿ≠",
        type: "success",
        backgroundColor: "#45D645",
        color: "white",
      });
    } else {
      showMessage({
        message: "ÿÆÿ∑ÿ£",
        description: "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ≠ÿ≥ÿßÿ®",
        type: "danger",
        backgroundColor: "#D64545",
        color: "white",
      });
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.logo}>
        <Image
          source={require("../assets/images/logo.png")}
          style={styles.image}
        />
        <TextInput
          placeholder="ÿßŸÑÿßÿ≥ŸÖ"
          value={name}
          onChangeText={setName}
          style={styles.input}
        />
        <TextInput
          placeholder="ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä"
          value={email}
          onChangeText={setEmail}
          style={styles.input}
        />
        <TextInput
          placeholder="ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ"
          value={phoneNumber}
          onChangeText={setPhoneNumber}
          style={styles.input}
        />
        <TextInput
          placeholder="ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±"
          value={password}
          onChangeText={setPassword}
          secureTextEntry
          style={styles.input}
        />
        <TextInput
          placeholder="ÿ™ÿ£ŸÉŸäÿØ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±"
          value={confirmPassword}
          onChangeText={setConfirmPassword}
          secureTextEntry
          style={styles.input}
        />
        <TouchableOpacity onPress={handleSignup} style={styles.button}>
          <Text style={styles.buttonText}>ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ®</Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => navigation.navigate("Login")}
          style={styles.loginLink}
        >
          <Text style={styles.loginLinkText}>ŸÑÿØŸäŸÉ ÿ≠ÿ≥ÿßÿ®ÿü ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F9FAFB",
  },
  logo: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  input: {
    width: "80%",
    height: 40,
    borderWidth: 1,
    borderColor: "black",
    borderRadius: 10,
    margin: 10,
    padding: 10,
    backgroundColor: "white",
    textAlign: "right",
  },
  button: {
    backgroundColor: "#006C9A",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginTop: 10,
    width: "80%",
    alignItems: "center",
  },
  buttonText: {
    color: "#FFFFFF",
    fontWeight: "bold",
    fontSize: 16,
    textAlign: "center",
  },
  image: {
    width: 100,
    height: 100,
    marginBottom: 20,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: "black",
  },
  loginLink: {
    marginTop: 10,
    textAlign: "center",
  },
  loginLinkText: {
    color: "black",
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default Signup;


