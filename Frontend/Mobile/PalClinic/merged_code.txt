
--- FILE: App.js ---

import * as React from "react";
import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import FlashMessage from "react-native-flash-message";
import Login from "./screens/login";
import Signup from "./screens/signup";
import Home from "./screens/home";
const Stack = createNativeStackNavigator();

export default function App() {
  return (
    <>
      <NavigationContainer>
        <Stack.Navigator initialRouteName="Login">
          <Stack.Screen name="Login" component={Login} options={{ headerShown: false }} />
          <Stack.Screen name="Signup" component={Signup} options={{ headerShown: false }} />
          <Stack.Screen name="Home" component={Home} options={{ headerShown: false }} />
        </Stack.Navigator>
      </NavigationContainer>
      <FlashMessage position="bottom" />
    </>
  );
}



--- FILE: index.js ---

import { registerRootComponent } from 'expo';

import App from './App';

// registerRootComponent calls AppRegistry.registerComponent('main', () => App);
// It also ensures that whether you load the app in Expo Go or in a native build,
// the environment is set up appropriately
registerRootComponent(App);



--- FILE: api\login.js ---

import { BASE_URL } from "../config/config"; // Adjust path as needed

const login = async (email, password) => {
  const response = await fetch(`${BASE_URL}/Users/signIn/`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ email, password }),
  });

  return response;
};

export default login;



--- FILE: api\signup.js ---

import { BASE_URL } from "../config/config";

const signin = async (email, password, name, phoneNumber, confirm_password) => {
    const response = await fetch(`${BASE_URL}/Users/signUp/`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            email,
            password,
            name,
            phoneNumber,
            confirm_password,
            role: "patient",    
        }),
    });
   
    return response;
}

export default signin;

  



--- FILE: config\config.js ---

export const BASE_URL = "http://192.168.1.101:8000";



--- FILE: config\tokenManager.js ---

import * as SecureStore from "expo-secure-store";
import { BASE_URL } from "./config";

export const getAccessToken = async () =>
  await SecureStore.getItemAsync("accessToken");

export const getRefreshToken = async () =>
  await SecureStore.getItemAsync("refreshToken");

export const setTokens = async (access, refresh) => {
  await SecureStore.setItemAsync("accessToken", access);
  await SecureStore.setItemAsync("refreshToken", refresh);
};

export const clearTokens = async () => {
  await SecureStore.deleteItemAsync("accessToken");
  await SecureStore.deleteItemAsync("refreshToken");
};

export const refreshAccessToken = async () => {
  const refresh = await getRefreshToken();
  if (!refresh) return null;

  const response = await fetch(`${BASE_URL}/Users/token/refresh/`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ refresh }),
  });

  const data = await response.json();

  if (data?.access) {
    await SecureStore.setItemAsync("accessToken", data.access);
    return data.access;
  } else {
    await clearTokens();
    return null;
  }
};



--- FILE: screens\home.js ---

import React from "react";
import { View, Text, StyleSheet } from "react-native";

export default function Home() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>🎉 مرحباً بك في الصفحة الرئيسية</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    justifyContent: "center",
    alignItems: "center",
  },
  text: {
    fontSize: 22,
    fontWeight: "bold",
  },
});



--- FILE: screens\login.js ---

import {
  View,
  Text,
  Image,
  TextInput,
  StyleSheet,
  TouchableOpacity,
  Alert,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { useState } from "react";
import login from "../api/login";
import { useNavigation } from "@react-navigation/native";
import * as SecureStore from "expo-secure-store";
import FlashMessage, { showMessage } from "react-native-flash-message";

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const navigation = useNavigation();
  const handleLogin = async () => {
    if (email === "" || password === "") {
      showMessage({
        message: "تنبيه",
        description: "الرجاء ادخال البريد الإلكتروني وكلمة المرور",
        type: "danger",
        backgroundColor: "#D64545",
        color: "white",
      });
      return;
    }

    const response = await login(email, password);
    const data = await response.json();
    if (!response.ok) {
      showMessage({
        message: "خطأ",
        description: "كلمة المرور او البريد الإلكتروني غير صحيح",
        type: "danger",
        backgroundColor: "#D64545",
        color: "white",
      });
      return; 
    }

    if (data.role !== "patient") {
      showMessage({
        message: "تنبيه",
        description: "الرجاء تسجيل الدخول من المتصفح، هذا التطبيق مخصص للمرضى",
        type: "danger",
        backgroundColor: "#D64545",
        color: "white",
      });
      return; 
    }

    showMessage({
      message: "نجاح",
      description: "تم تسجيل الدخول بنجاح",
      type: "success",
      backgroundColor: "#45D645",
      color: "white",
    });

    await SecureStore.setItemAsync("token", data.access);
    await SecureStore.setItemAsync("refresh", data.refresh);
    await SecureStore.setItemAsync("role", data.role);
    await SecureStore.setItemAsync("id", data.id);

    navigation.navigate("Home");
  };

  return (
    <SafeAreaView style={logInStyle.container}>
      <View style={logInStyle.logo}>
        <Image
          source={require("../assets/images/logo.png")}
          style={logInStyle.image}
        />
        <TextInput
          placeholder="البريد الإلكتروني"
          value={email}
          onChangeText={setEmail}
          style={logInStyle.input}
        />
        <TextInput
          placeholder="كلمة المرور"
          value={password}
          onChangeText={setPassword}
          secureTextEntry
          style={logInStyle.input}
        />
        <TouchableOpacity onPress={handleLogin} style={logInStyle.button}>
          <Text style={logInStyle.buttonText}>تسجيل الدخول</Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => navigation.navigate("Signup")}
          style={logInStyle.createAccount}
        >
          <Text style={logInStyle.createAccountText}>انشاء حساب</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
}

const logInStyle = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F9FAFB",
  },
  logo: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  input: {
    width: "80%",
    height: 40,
    borderWidth: 1,
    borderColor: "black",
    borderRadius: 10,
    margin: 10,
    padding: 10,
    backgroundColor: "white",
    textAlign: "right",
  },
  button: {
    backgroundColor: "#006C9A",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginTop: 10,
    width: "80%",
    alignItems: "center",
  },
  buttonText: {
    color: "#FFFFFF",
    fontWeight: "bold",
    fontSize: 16,
    textAlign: "center",
  },
  image: {
    width: 100,
    height: 100,
    marginBottom: 20,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: "black",
  },
  createAccount: {
    marginTop: 10,
    textAlign: "center",
    color: "white",
    fontSize: 16,
    fontWeight: "bold",
  },
  createAccountText: {
    color: "black",
    fontSize: 16,
    fontWeight: "bold",
  },
});



--- FILE: screens\signup.js ---

import { SafeAreaView } from "react-native-safe-area-context";
import {
  View,
  Text,
  StyleSheet,
  Image,
  TextInput,
  TouchableOpacity,
} from "react-native";
import { useState } from "react";
import { useNavigation } from "@react-navigation/native";
import { showMessage } from "react-native-flash-message";
import signin from "../api/signup";

const Signup = () => {
  const [email, setEmail] = useState("");
  const [name, setName] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [phoneNumber, setPhoneNumber] = useState("");
  const navigation = useNavigation();

  const handleSignup = async () => {
    if (!email || !name || !password || !confirmPassword || !phoneNumber) {
        console.log(email, name, password, confirmPassword, phoneNumber);
      showMessage({
        message: "تنبيه",
        description: "الرجاء تعبئة جميع الحقول",
        type: "danger",
        backgroundColor: "#D64545",
        color: "white",
      });
      return;
    }
    if (password !== confirmPassword) {
      showMessage({
        message: "تنبيه",
        description: "كلمة المرور غير متطابقة",
        type: "danger",
        backgroundColor: "#D64545",
        color: "white",
      });
      return;
    }

    const response = await signin(
      email,
      password,
      name,
      phoneNumber,
      confirmPassword
    );

    if (response.ok) {
      navigation.navigate("Login");
      showMessage({
        message: "تنبيه",
        description: "تم إنشاء الحساب بنجاح",
        type: "success",
        backgroundColor: "#45D645",
        color: "white",
      });
    } else {
      showMessage({
        message: "خطأ",
        description: "حدث خطأ أثناء إنشاء الحساب",
        type: "danger",
        backgroundColor: "#D64545",
        color: "white",
      });
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.logo}>
        <Image
          source={require("../assets/images/logo.png")}
          style={styles.image}
        />
        <TextInput
          placeholder="الاسم"
          value={name}
          onChangeText={setName}
          style={styles.input}
        />
        <TextInput
          placeholder="البريد الإلكتروني"
          value={email}
          onChangeText={setEmail}
          style={styles.input}
        />
        <TextInput
          placeholder="رقم الهاتف"
          value={phoneNumber}
          onChangeText={setPhoneNumber}
          style={styles.input}
        />
        <TextInput
          placeholder="كلمة المرور"
          value={password}
          onChangeText={setPassword}
          secureTextEntry
          style={styles.input}
        />
        <TextInput
          placeholder="تأكيد كلمة المرور"
          value={confirmPassword}
          onChangeText={setConfirmPassword}
          secureTextEntry
          style={styles.input}
        />
        <TouchableOpacity onPress={handleSignup} style={styles.button}>
          <Text style={styles.buttonText}>إنشاء حساب</Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => navigation.navigate("Login")}
          style={styles.loginLink}
        >
          <Text style={styles.loginLinkText}>لديك حساب؟ تسجيل الدخول</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F9FAFB",
  },
  logo: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  input: {
    width: "80%",
    height: 40,
    borderWidth: 1,
    borderColor: "black",
    borderRadius: 10,
    margin: 10,
    padding: 10,
    backgroundColor: "white",
    textAlign: "right",
  },
  button: {
    backgroundColor: "#006C9A",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginTop: 10,
    width: "80%",
    alignItems: "center",
  },
  buttonText: {
    color: "#FFFFFF",
    fontWeight: "bold",
    fontSize: 16,
    textAlign: "center",
  },
  image: {
    width: 100,
    height: 100,
    marginBottom: 20,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: "black",
  },
  loginLink: {
    marginTop: 10,
    textAlign: "center",
  },
  loginLinkText: {
    color: "black",
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default Signup;


